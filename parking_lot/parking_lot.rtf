{\rtf1\ansi\ansicpg1252\cocoartf2761
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 HelveticaNeue;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red0\green0\blue0;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0\c84706;\cssrgb\c0\c0\c0;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{circle\}}{\leveltext\leveltemplateid2\'01\uc0\u9702 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listname ;}\listid1}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs30 \cf2 \expnd0\expndtw0\kerning0
Parking Lot\cf0 \
\
\cf2 Questions\cf0 \
\
\cf2 - is it a single parking lot or multiple parking lots managed by a singular app\cf0 \
\cf2 - different types of vehicles\cf0 \
\cf2 - rates of vehicles\cf0 \
\cf2 - payment handled by third party\cf0 \
\
\
\cf2 System Requirements\cf0 \
\
\cf2 - need to reserve a parking spot for oncoming vehicles\cf0 \
\cf2 - present a ticket to user\cf0 \
\cf2 - user needs to pay for the parking at the exit in cash or via the mobile app\cf0 \
\cf2 - consistent such that no 2 users get same parking spot\cf0 \
\cf2 - types of vehicles : compact, regular, large\cf0 \
\cf2 - flat rate differentiating based on type\cf0 \
\
\cf2 Public Endpoints\cf0 \
\
\cf2 1. /reserve\cf0 \
\cf2 params: vehicle type, start time\cf0 \
\cf2 return: spot_id , reservation_id\cf0 \
\
\cf2 2. /pay\cf0 \
\cf2 params: reservation_id\cf0 \
\cf2 returns: boolean\cf0 \
\
\
\cf2 Internal Endpoints\cf0 \
\
\cf2 1. /calculate_payment\cf0 \
\cf2 params: reservation_id\cf0 \
\cf2 returns: integer/double\cf0 \
\
\cf2 2. /freespots\cf0 \
\cf2 params: vehicle_type, start_time\cf0 \
\
\cf2 3. /allocate_spot\cf0 \
\cf2 params: vehicle_type, start_time\cf0 \
\
\cf2 4. /register\cf0 \
\cf2 params: username, pw, first name, last name, email\cf0 \
\
\cf2 5. /login\cf0 \
\cf2 params: username, pw\cf0 \
\
\
\cf2 Data Schema\cf0 \
\
\cf2 refer to draw.io\cf0 \
\
\cf2 High Level Architecture\cf0 \
\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls1\ilvl0\cf2 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
since it is read focused system where we will read more data than write, we can create read replicas of DB
\fs24 \
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\partightenfactor0
\ls1\ilvl1
\fs30 \cf2 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
trade off for this can be latency. but we want accurate data instead of fast result. So we can use read lock so read operations are paused when we are writing to db
\fs24 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls1\ilvl0
\fs30 \cf2 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
we can also use Sharding to split the DB into smaller manageable parts. It is part of horizontal partitioning
\fs24 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls1\ilvl0\cf2 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\
}